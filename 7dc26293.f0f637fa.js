(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{166:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(9),o=(n(0),n(196)),i={id:"component-testing",title:"Component testing"},c={id:"testing/component-testing",isDocsHomePage:!1,title:"Component testing",description:"Unit testing your Redux actions and reducers is nice, but you",source:"@site/docs/testing/component-testing.md",permalink:"/docs/testing/component-testing",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/testing/component-testing.md",sidebar:"someSidebar",previous:{title:"Unit testing",permalink:"/docs/testing/unit-testing"},next:{title:"Remote testing",permalink:"/docs/testing/remote-testing"}},s=[{value:"Shallow rendering",id:"shallow-rendering",children:[]},{value:"react-testing-library",id:"react-testing-library",children:[{value:"Snapshot testing",id:"snapshot-testing",children:[]},{value:"Behavior testing",id:"behavior-testing",children:[]}]}],l={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/testing/unit-testing"}),"Unit testing your Redux actions and reducers")," is nice, but you\ncan do even more to make sure nothing breaks your application. Since React is\nthe ",Object(o.b)("em",{parentName:"p"},"view")," layer of your app, let's see how to test Components too!"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"#shallow-rendering"}),"Shallow rendering")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"#react-testing-library"}),"react-testing-library"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"#snapshot-testing"}),"Snapshot testing")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"#behavior-testing"}),"Behavior testing"))))),Object(o.b)("h2",{id:"shallow-rendering"},"Shallow rendering"),Object(o.b)("p",null,"React provides us with a nice add-on called the Shallow Renderer. This renderer\nwill render a React component ",Object(o.b)("strong",{parentName:"p"},"one level deep"),". Lets take a look at what that\nmeans with a simple ",Object(o.b)("inlineCode",{parentName:"p"},"<Button>")," component."),Object(o.b)("p",null,"This component renders a ",Object(o.b)("inlineCode",{parentName:"p"},"<button>")," element containing a checkmark icon and some\ntext:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// Button.js\n\nimport React from 'react';\nimport CheckmarkIcon from './CheckmarkIcon';\n\nfunction Button(props) {\n  return (\n    <button className=\"btn\" onClick={props.onClick}>\n      <CheckmarkIcon />\n      {React.Children.only(props.children)}\n    </button>\n  );\n}\n\nexport default Button;\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note: This is a ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"../js/README.md#architecture-components-and-containers"}),"state",Object(o.b)("strong",{parentName:"a"},"less"),' ("dumb") component'))),Object(o.b)("p",null,"It might be used in another component like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// HomePage.js\n\nimport Button from './Button';\n\nfunction HomePage() {\n  return <Button onClick={this.doSomething}>Click me!</Button>;\n}\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note: This is a ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"../js/README.md#architecture-components-and-containers"}),"state",Object(o.b)("strong",{parentName:"a"},"ful"),' ("smart") component'),"!")),Object(o.b)("p",null,"When rendered normally with the standard ",Object(o.b)("inlineCode",{parentName:"p"},"ReactDOM.render")," function, this will\nbe the HTML output\n(",Object(o.b)("em",{parentName:"p"},"Comments added in parallel to compare structures in HTML from JSX source"),"):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),'<button>                           \x3c!-- <Button>             --\x3e\n  <i class="fa fa-checkmark"></i>  \x3c!--   <CheckmarkIcon />  --\x3e\n  Click Me!                        \x3c!--   { props.children } --\x3e\n</button>                          \x3c!-- </Button>            --\x3e\n')),Object(o.b)("p",null,'Conversely, when rendered with the shallow renderer, we\'ll get a String\ncontaining this "HTML":'),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-html"}),"<button>              \x3c!-- <Button>             --\x3e\n  <CheckmarkIcon />   \x3c!--   NOT RENDERED!      --\x3e\n  Click Me!           \x3c!--   { props.children } --\x3e\n</button>             \x3c!-- </Button>            --\x3e\n")),Object(o.b)("p",null,"If we test our ",Object(o.b)("inlineCode",{parentName:"p"},"Button")," with the normal renderer and there's a problem\nwith the ",Object(o.b)("inlineCode",{parentName:"p"},"CheckmarkIcon")," then the test for the ",Object(o.b)("inlineCode",{parentName:"p"},"Button")," will fail as well.\nThis makes it harder to find the culprit. Using the ",Object(o.b)("em",{parentName:"p"},"shallow")," renderer, we isolate\nthe problem's cause since we don't render any other components other than the\none we're testing!"),Object(o.b)("p",null,"The problem with the shallow renderer is that all assertions have to be done\nmanually, and you cannot do anything that needs the DOM."),Object(o.b)("h2",{id:"react-testing-library"},"react-testing-library"),Object(o.b)("p",null,"In order to write more maintainable tests which also resemble more closely the way\nour component is used in real life, we have included ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/kentcdodds/react-testing-library"}),"react-testing-library"),".\nThis library renders our component within an actual DOM and provides utilities for querying it."),Object(o.b)("p",null,"Let's give it a go with our ",Object(o.b)("inlineCode",{parentName:"p"},"<Button />")," component, shall we? First, let's check that it renders our component with its\nchildren, if any, and second that it handles clicks."),Object(o.b)("p",null,"This is our test setup:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import React from 'react';\nimport { render, fireEvent } from 'react-testing-library';\nimport Button from '../Button';\n\ndescribe('<Button />', () => {\n  it('renders and matches the snapshot', () => {});\n\n  it('handles clicks', () => {});\n});\n")),Object(o.b)("h3",{id:"snapshot-testing"},"Snapshot testing"),Object(o.b)("p",null,"Let's start by ensuring that it renders our component and no changes happened to it since the last time it was\nsuccessfully tested."),Object(o.b)("p",null,"We will do so by rendering it and creating a ",Object(o.b)("em",{parentName:"p"},Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"https://jestjs.io/docs/en/snapshot-testing"}),"snapshot")),"\nwhich can be compared with a previously committed snapshot. If no snapshot exists, a new one is created."),Object(o.b)("p",null,"For this, we first call ",Object(o.b)("inlineCode",{parentName:"p"},"render"),". This will render our ",Object(o.b)("inlineCode",{parentName:"p"},"<Button />")," component into a ",Object(o.b)("em",{parentName:"p"},"container"),", by default a\n",Object(o.b)("inlineCode",{parentName:"p"},"<div>"),", which is appended to ",Object(o.b)("inlineCode",{parentName:"p"},"document.body"),". We then create a snapshot and ",Object(o.b)("inlineCode",{parentName:"p"},"expect")," that this snapshot is the same as\nthe existing snapshot, taken in a previous run of this test and committed to the repository."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"it('renders and matches the snapshot', () => {\n  const text = 'Click me!';\n  const { container } = render(<Button>{text}</Button>);\n\n  expect(container.firstChild).toMatchSnapshot();\n});\n")),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"render")," returns an object that has a property ",Object(o.b)("inlineCode",{parentName:"p"},"container")," and yes, this is the container our\n",Object(o.b)("inlineCode",{parentName:"p"},"<Button />")," component has been rendered in."),Object(o.b)("p",null,"As this is rendered within a ",Object(o.b)("em",{parentName:"p"},"normal")," DOM we can query our\ncomponent with ",Object(o.b)("inlineCode",{parentName:"p"},"container.firstChild"),". This will be our subject for a snapshot.\nSnapshots are placed in the ",Object(o.b)("inlineCode",{parentName:"p"},"__snapshots__")," folder within our ",Object(o.b)("inlineCode",{parentName:"p"},"tests")," folder. Make sure you commit\nthese snapshots to your repository."),Object(o.b)("p",null,"Great! So, now if anyone makes any change to our ",Object(o.b)("inlineCode",{parentName:"p"},"<Button />")," component the test will fail and we get notified of what\nchanged."),Object(o.b)("h3",{id:"behavior-testing"},"Behavior testing"),Object(o.b)("p",null,"Onwards to our last and most advanced test: checking that our ",Object(o.b)("inlineCode",{parentName:"p"},"<Button />")," handles clicks correctly."),Object(o.b)("p",null,"We'll use a ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://jestjs.io/docs/en/mock-functions"}),"mock function")," for this. A mock function is a function that\nkeeps track of ",Object(o.b)("em",{parentName:"p"},"if"),", ",Object(o.b)("em",{parentName:"p"},"how often"),", and ",Object(o.b)("em",{parentName:"p"},"with what arguments")," it has been called. We pass this function as the ",Object(o.b)("inlineCode",{parentName:"p"},"onClick")," handler to our component,\nsimulate a click and, lastly, check that our mock function was called:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"it('handles clicks', () => {\n  const onClickMock = jest.fn();\n  const text = 'Click me!';\n  const { getByText } = render(<Button onClick={onClickMock}>{text}</Button>);\n\n  fireEvent.click(getByText(text));\n  expect(onClickSpy).toHaveBeenCalledTimes(1);\n});\n")),Object(o.b)("p",null,"Our finished test file looks like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import React from 'react';\nimport { render, fireEvent } from 'react-testing-library';\nimport Button from '../Button';\n\ndescribe('<Button />', () => {\n  it('renders and matches the snapshot', () => {\n    const text = 'Click me!';\n    const { container } = render(<Button>{text}</Button>);\n\n    expect(container.firstChild).toMatchSnapshot();\n  });\n\n  it('handles clicks', () => {\n    const onClickMock = jest.fn();\n    const text = 'Click me!';\n    const { getByText } = render(<Button onClick={onClickMock}>{text}</Button>);\n  \n    fireEvent.click(getByText(text));\n    expect(onClickSpy).toHaveBeenCalledTimes(1);\n  });\n});\n")),Object(o.b)("p",null,"And that's how you unit test your components and make sure they work correctly!"),Object(o.b)("p",null,"Also have a look at our example application. It deliberately shows some variations of implementing tests with\nreact-testing-library."),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Continue to learn how to test your components ",Object(o.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/testing/remote-testing"}),"remotely"),"!")))}p.isMDXComponent=!0},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,d=b["".concat(i,".").concat(u)]||b[u]||m[u]||o;return n?r.a.createElement(d,c(c({ref:t},l),{},{components:n})):r.a.createElement(d,c({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);