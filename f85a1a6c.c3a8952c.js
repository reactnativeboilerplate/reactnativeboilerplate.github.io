(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{191:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return b}));var a=n(2),r=n(9),i=(n(0),n(196)),o={id:"unit-testing",title:"Unit testing"},s={id:"testing/unit-testing",isDocsHomePage:!1,title:"Unit testing",description:"Unit testing is the practice of testing the smallest possible units of our",source:"@site/docs/testing/unit-testing.md",permalink:"/docs/testing/unit-testing",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/testing/unit-testing.md",sidebar:"someSidebar",previous:{title:"Extracting components",permalink:"/docs/general/components"},next:{title:"Component testing",permalink:"/docs/testing/component-testing"}},c=[{value:"Basics",id:"basics",children:[{value:"Jest",id:"jest",children:[]}]},{value:"Testing Redux Applications",id:"testing-redux-applications",children:[{value:"Reducers",id:"reducers",children:[]},{value:"Actions",id:"actions",children:[]}]}],l={rightToc:c};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Unit testing is the practice of testing the smallest possible ",Object(i.b)("em",{parentName:"p"},"units")," of our\ncode, functions. We run our tests and automatically verify that our functions\ndo the thing we expect them to do. We assert that, given a set of inputs, our\nfunctions return the proper values and handle problems."),Object(i.b)("p",null,"This boilerplate uses the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/facebook/jest"}),"Jest")," test\nframework to run tests and make assertions. This library makes writing tests as easy as speaking - you\n",Object(i.b)("inlineCode",{parentName:"p"},"describe")," a unit of your code and ",Object(i.b)("inlineCode",{parentName:"p"},"expect")," ",Object(i.b)("inlineCode",{parentName:"p"},"it")," to do the correct thing."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#basics"}),"Basics"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#jest"}),"Jest")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#testing-redux-applications"}),"Testing Redux Applications"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#reducers"}),"Reducers"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#snapshots"}),"snapshots")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"#actions"}),"Actions"))))),Object(i.b)("p",null,"We use this glob pattern to find unit tests ",Object(i.b)("inlineCode",{parentName:"p"},"app/**/*.test.js")," - this tells\nJest to run all files that end with ",Object(i.b)("inlineCode",{parentName:"p"},".test.js")," anywhere within the ",Object(i.b)("inlineCode",{parentName:"p"},"app"),"\nfolder. Use this to your advantage, and put unit tests next to the files you\nwant to test so relevant files stay together!"),Object(i.b)("h2",{id:"basics"},"Basics"),Object(i.b)("p",null,"For the sake of this guide, lets pretend we're testing this function. It's\nsituated in the ",Object(i.b)("inlineCode",{parentName:"p"},"add.js")," file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// add.js\n\nexport function add(x, y) {\n  return x + y;\n}\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: The ",Object(i.b)("inlineCode",{parentName:"p"},"export")," here is ES6 syntax, and you would need an ES6 transpiler\n(e.g. babel.js) to run this JavaScript.")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"The ",Object(i.b)("inlineCode",{parentName:"p"},"export")," makes our function available as a module, which we can ",Object(i.b)("inlineCode",{parentName:"p"},"import")," and use\nin other files. Continue below to see what that looks like.")),Object(i.b)("h3",{id:"jest"},"Jest"),Object(i.b)("p",null,"Jest is our unit testing framework. Its API, which we write tests with, is\nspeech like and easy to use."),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: The official documentation for Jest can be found ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://facebook.github.io/jest/"}),"here"),".")),Object(i.b)("p",null,"We're going to add a second file called ",Object(i.b)("inlineCode",{parentName:"p"},"add.test.js")," with our unit tests\ninside."),Object(i.b)("p",null,"First, we ",Object(i.b)("inlineCode",{parentName:"p"},"import")," the function in our ",Object(i.b)("inlineCode",{parentName:"p"},"add.test.js")," file:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// add.test.js\n\nimport { add } from './add.js';\n")),Object(i.b)("p",null,"Second, we ",Object(i.b)("inlineCode",{parentName:"p"},"describe")," our function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"describe('add()', () => {});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: ",Object(i.b)("inlineCode",{parentName:"p"},"(arg1, arg2) => { }")," is ES6 notation for anonymous functions, i.e. is\nthe same thing as ",Object(i.b)("inlineCode",{parentName:"p"},"function(arg1, arg2) { }"))),Object(i.b)("p",null,"Third, we tell Jest what ",Object(i.b)("inlineCode",{parentName:"p"},"it")," (our function) should do:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"describe('add()', () => {\n  it('adds two numbers', () => {});\n\n  it(\"doesn't add the third number\", () => {});\n});\n")),Object(i.b)("p",null,"Now, We're going to test that our little function correctly adds two numbers.\nWe are going to take some chosen inputs, and ",Object(i.b)("inlineCode",{parentName:"p"},"expect")," the result ",Object(i.b)("inlineCode",{parentName:"p"},"toEqual")," the\ncorresponding output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// [...]\nit('adds two numbers', () => {\n  expect(add(2, 3)).toEqual(5);\n});\n// [...]\n")),Object(i.b)("p",null,"Lets add the second test, which determines that our function doesn't add the\nthird number if one is present:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'// [...]\nit("doesn\'t add the third number", () => {\n  expect(add(2, 3, 5)).toEqual(add(2, 3));\n});\n// [...]\n')),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: Notice that we call ",Object(i.b)("inlineCode",{parentName:"p"},"add")," in ",Object(i.b)("inlineCode",{parentName:"p"},"toEqual"),". I won't tell you why, but just\nthink about what would happen if we rewrote the expect as ",Object(i.b)("inlineCode",{parentName:"p"},"expect(add(2, 3, 5)).toEqual(5)"),"\nand somebody broke something in the add function. What would this test\nactually... test?")),Object(i.b)("p",null,"Should our function work, Jest will show this output when running the tests:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"add()\n  \u2713 adds two numbers\n  \u2713 doesn't add the third number\n")),Object(i.b)("p",null,"Lets say an unnamed colleague of ours breaks our function:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// add.js\n\nexport function add(x, y) {\n  return x * y;\n}\n")),Object(i.b)("p",null,"Oh no, now our function doesn't add the numbers anymore, it multiplies them!\nImagine the consequences to our code that uses the function!"),Object(i.b)("p",null,"Thankfully, we have unit tests in place. Because we run the unit tests before we\ndeploy our application, we see this output:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"\u25cf add() \u203a adds two numbers\n\n  expect(received).toEqual(expected)\n\n  Expected value to equal:\n    5\n  Received:\n    6\n\nadd()\n  \u2715 adds two numbers\n  \u2713 doesn't add the third number\n")),Object(i.b)("p",null,"This tells us that something is broken in the add function before any users get\nthe code! Congratulations, you just saved time and money!"),Object(i.b)("h2",{id:"testing-redux-applications"},"Testing Redux Applications"),Object(i.b)("p",null,"Imagine a navigation bar, this is what its folder might look like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"NavBar          # Wrapping folder\n\u251c\u2500\u2500 index.js      # Actual component\n\u251c\u2500\u2500 actions.js    # Actions\n\u251c\u2500\u2500 constants.js  # Constants\n\u251c\u2500\u2500 reducer.js    # Reducer\n\u2514\u2500\u2500 test               # Folder of tests\n    \u251c\u2500\u2500 actions.test.js  # Actions tests\n    \u2514\u2500\u2500 reducer.test.js  # Reducer tests\n")),Object(i.b)("p",null,"This boilerplate uses Redux, partially because it turns our data flow into\ntestable (pure) functions. Using the ",Object(i.b)("inlineCode",{parentName:"p"},"NavBar")," component above,\nlet's see what testing the actions and the reducer would look like."),Object(i.b)("p",null,"This is what our ",Object(i.b)("inlineCode",{parentName:"p"},"NavBar")," actions look like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// actions.js\n\nimport { TOGGLE_NAV } from './constants';\n\nexport function toggleNav() {\n  return { type: TOGGLE_NAV };\n}\n")),Object(i.b)("p",null,"with this reducer:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// reducer.js\n\nimport { TOGGLE_NAV } from './constants';\n\nconst initialState = {\n  open: false,\n};\n\nfunction NavBarReducer(state = initialState, action) {\n  switch (action.type) {\n    case TOGGLE_NAV:\n      return Object.assign({}, state, {\n        open: !state.open,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default NavBarReducer;\n")),Object(i.b)("p",null,"Lets test the reducer first!"),Object(i.b)("h3",{id:"reducers"},"Reducers"),Object(i.b)("p",null,"First, we have to import the reducer and the action."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// reducer.test.js\n\nimport NavBarReducer from '../reducer';\nimport { toggleNav } from '../actions';\n")),Object(i.b)("p",null,"Then we ",Object(i.b)("inlineCode",{parentName:"p"},"describe")," the reducer, and add two tests: we check that it returns the\ninitial state and that it handles the ",Object(i.b)("inlineCode",{parentName:"p"},"toggleNav")," action."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"describe('NavBarReducer', () => {\n  it('returns the initial state', () => {});\n\n  it('handles the toggleNav action', () => {});\n});\n")),Object(i.b)("p",null,"Lets write the tests themselves! Since the reducer is just a function, we can\ncall it like any other function and ",Object(i.b)("inlineCode",{parentName:"p"},"expect")," the output to equal something."),Object(i.b)("p",null,"To test that it returns the initial state, we call it with a state of ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"\n(the first argument), and an empty action (second argument). The reducer should\nreturn the initial state of the ",Object(i.b)("inlineCode",{parentName:"p"},"NavBar"),", which is"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"{\n  open: false,\n}\n")),Object(i.b)("p",null,"Lets put that into practice:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"describe('NavBarReducer', () => {\n  it('returns the initial state', () => {\n    expect(NavBarReducer(undefined, {})).toEqual({\n      open: false,\n    });\n  });\n\n  it('handles the toggleNav action', () => {});\n});\n")),Object(i.b)("p",null,"This works, but we have one problem: We also have to explicitly write the initial state itself. When\nsomebody changes the initial state, they will also have to manually update this code to directly reflect it."),Object(i.b)("p",null,"Instead, we can leverage Jest's new snapshots feature."),Object(i.b)("h4",{id:"snapshots"},"Snapshots"),Object(i.b)("p",null,"Jest has the ability to store serialized snapshots of most basic types of information (objects, arrays, etc). It then compares the stored version when later tests are run, to find any unexpected mismatches."),Object(i.b)("p",null,"We can write the test like"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"describe('NavBarReducer', () => {\n  it('returns the initial state', () => {\n    expect(NavBarReducer(undefined, {})).toMatchSnapshot();\n  });\n\n  it('handles the toggleNav action', () => {});\n});\n")),Object(i.b)("p",null,"Jest is now the one responsible for tracking the definition of the initial state. When somebody changes it in the future, Jest will warn that the snapshot doesn't match and then allow them to update the snapshot with a single command. No more manual updates!"),Object(i.b)("p",null,"For more details on Jest snapshots, please view ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://egghead.io/lessons/javascript-use-jest-s-snapshot-testing-feature"}),"Kent Dodd's feature video"),"."),Object(i.b)("p",null,"This is how our finished reducer test might look like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// NavBar.reducer.test.js\n\nimport NavBarReducer from '../NavBar.reducer';\nimport { toggleNav } from '../NavBar.actions';\n\ndescribe('NavBarReducer', () => {\n  it('returns the initial state', () => {\n    expect(NavBarReducer(undefined, {})).toMatchSnapshot();\n  });\n\n  it('handles the toggleNav action', () => {\n    expect(NavBarReducer({}, toggleNav())).toMatchSnapshot();\n  });\n});\n")),Object(i.b)("p",null,"Lets see how we can test actions next."),Object(i.b)("h3",{id:"actions"},"Actions"),Object(i.b)("p",null,"We have one action ",Object(i.b)("inlineCode",{parentName:"p"},"toggleNav")," that changes the ",Object(i.b)("inlineCode",{parentName:"p"},"NavBar")," open state."),Object(i.b)("p",null,"A Redux action is a pure function, so testing it isn't more difficult than\ntesting our ",Object(i.b)("inlineCode",{parentName:"p"},"add")," function from the first part of this guide!"),Object(i.b)("p",null,"The first step is to import the action to be tested, the constant it should\nreturn and ",Object(i.b)("inlineCode",{parentName:"p"},"expect"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// actions.test.js\n\nimport { toggleNav } from '../actions';\nimport { TOGGLE_NAV } from '../constants';\n")),Object(i.b)("p",null,"Then we ",Object(i.b)("inlineCode",{parentName:"p"},"describe")," the actions:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"describe('NavBar actions', () => {\n  describe('toggleNav', () => {\n    it('should return the correct constant', () => {});\n  });\n});\n")),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"Note: ",Object(i.b)("inlineCode",{parentName:"p"},"describe"),"s can be nested, which gives us nice output, as we'll see later.")),Object(i.b)("p",null,"And the last step is to add the assertion:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"it('should return the correct constant', () => {\n  expect(toggleNav()).toEqual({\n    type: TOGGLE_NAV,\n  });\n});\n")),Object(i.b)("p",null,"If our ",Object(i.b)("inlineCode",{parentName:"p"},"toggleNav")," action works correctly, this is the output Jest will show us:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"NavBar actions\n  toggleNav\n    \u2713 should return the correct constant\n")),Object(i.b)("p",null,"And that's it, we now know when somebody breaks the ",Object(i.b)("inlineCode",{parentName:"p"},"toggleNav")," action!"),Object(i.b)("p",null,Object(i.b)("em",{parentName:"p"},"Continue to learn how to test your application with ",Object(i.b)("a",Object(a.a)({parentName:"em"},{href:"/docs/testing/component-testing"}),"Component Testing"),"!")))}b.isMDXComponent=!0},196:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=b(n),d=a,h=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return n?r.a.createElement(h,s(s({ref:t},l),{},{components:n})):r.a.createElement(h,s({ref:t},l))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);